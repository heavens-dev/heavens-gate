from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from bot.utils.message_utils import preview_message
from bot.utils.states import (AddPeerStates, ContactAdminStates,
                              ExtendTimeStates, RenamePeerStates,
                              WhisperStates)
from bot.utils.user_helper import extend_users_usage_time
from config.loader import bot_cfg, bot_instance, ip_queue
from core.db.db_works import ClientFactory
from core.db.enums import ProtocolType
from core.logs import bot_logger
from core.utils.date_utils import parse_time

router = Router(name="state_callbacks")


@router.message(RenamePeerStates.name_entering)
async def finally_change_peer_name(message: Message, state: FSMContext):
    new_name = message.text

    if new_name.lower() in ["–æ—Ç–º–µ–Ω–∞", "cancel"]:
        await state.clear()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    if len(new_name) >= 16:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—å—à–µ 16 —Å–∏–º–≤–æ–ª–æ–≤!")
        await state.clear()
        return

    data = await state.get_data()
    user_id, peer_id = data.values()
    client = ClientFactory(user_id=user_id).get_client()
    client.change_peer_name(peer_id, new_name)
    await state.clear()
    await message.answer("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω!")

@router.message(ContactAdminStates.message_entering)
async def contact_admin(message: Message, state: FSMContext):
    await state.clear()
    if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "cancel"]:
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    for admin_id in bot_cfg.admins:
        await bot_instance.send_message(
            chat_id=admin_id,
            text=f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} ({message.from_user.id}):\n\n{message.text}"
            f"\n\nüîó –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>/whisper {message.from_user.id}</code>"
        )
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")

@router.message(ExtendTimeStates.time_entering)
async def extend_usage_time_custom_entered(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id, _ = data.values()

    await state.clear()

    time_to_add = parse_time(message.text)

    if not time_to_add:
        await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {message.text}")
        return

    client = ClientFactory(user_id=user_id).get_client()

    if extend_users_usage_time(client, time_to_add):
        await message.answer(f"‚úÖ –í—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞ {message.text}.")
    else:
        await message.answer(f"‚ùì –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

@router.message(WhisperStates.message_entering)
async def whisper_state(message: Message, state: FSMContext):
    user_id = (await state.get_data())["user_id"]
    if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "cancel"]:
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return

    await preview_message(message.text, message.from_user.id, state, [user_id])

@router.message(AddPeerStates.select_amount)
async def add_peers(message: Message, state: FSMContext):
    data = await state.get_data()
    client = ClientFactory(user_id=data["user_id"]).get_client()

    try:
        for _ in range(int(message.text)):
            match data["protocol"]:
                case ProtocolType.WIREGUARD | ProtocolType.AMNEZIA_WIREGUARD:
                    ip_addr = ip_queue.get_ip()
                    client.add_wireguard_peer(
                        ip_addr,
                        is_amnezia=data["protocol"] == ProtocolType.AMNEZIA_WIREGUARD
                    )
                case ProtocolType.XRAY:
                    # FIXME: hardcoded flow and inbound_id
                    client.add_xray_peer(
                        flow="xtls-rprx-vision",
                        inbound_id=3,
                    )
                case _:
                    raise TypeError("Unknown protocol type")
        await message.answer("‚úÖ –ü–∏—Ä—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    except ValueError:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∏—Ä–æ–≤. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
    except IndexError:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤.")
        bot_logger.error("‚ùå Tried to add a peer, but no IP addresses are available.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∏—Ä–æ–≤: {e}")
        bot_logger.exception(f"‚ùå Error while adding peers: {e}")
    finally:
        await state.clear()
        return
