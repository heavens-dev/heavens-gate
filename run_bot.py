import argparse
import asyncio
import os
import random
import signal
import sys

from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message

from bot.commands import (get_admin_commands, get_default_commands,
                          set_admin_commands, set_user_commands)
from bot.handlers import get_handlers_router
from config.loader import (bot_cfg, bot_dispatcher, bot_instance, cfg,
                           connections_observer, db_instance,
                           interval_observer, prometheus_monitor, wghub)
from core.db.db_works import ClientFactory
from core.logs import bot_logger
from core.monitoring.metrics import SERVER_UP


def graceful_shutdown(sig, frame):
    bot_logger.critical("Recieved SIGINT signal, shutting down...")
    if prometheus_monitor is not None:
        prometheus_monitor.stop_server()
    SERVER_UP.set(0)
    sys.exit(0)

@bot_dispatcher.message(CommandStart())
async def cmd_start(message: Message) -> None:
    if message.chat.id in bot_cfg.admins:
        await set_admin_commands(message.chat.id)
    else:
        await set_user_commands(message.chat.id)

    with db_instance.atomic():
        # just in case.
        client, created = ClientFactory(user_id=message.chat.id).get_or_create_client(
            name=message.chat.username
        )

        if created:
            if cfg.is_canary:
                ...

    keyboard = None
    faq_str = ""
    if bot_cfg.faq_url is not None:
        faq_button = InlineKeyboardButton(text="FAQ", url=bot_cfg.faq_url)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[faq_button]])
        faq_str = "\n–ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å FAQ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ." \

    if cfg.is_canary:
        msg = f"""–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ Canary –≤–µ—Ä—Å–∏—è Heaven's Gate.
–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è, —Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π <a href="https://t.me/heavens_gate_vpn_bot">–æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞</a>.
–ó–¥–µ—Å—å –æ–±–∫–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–∞–∫ –±–æ—Ç–∞, —Ç–∞–∫ –∏ —è–¥—Ä–∞ –≤—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ç–∫—É, –æ–¥–Ω–∞–∫–æ –∏–º–µ–π –≤ –≤–∏–¥—É, —á—Ç–æ –∑–¥–µ—Å—å <i>–≤—Å—ë –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è</i>.
–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É, —Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –Ω–∞–º –æ–± —ç—Ç–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /contact –∏–ª–∏ —Å–æ–∑–¥–∞–π issue –Ω–∞ <a href="https://github.com/heavens-dev/heavens-gate/issues">GitHub</a>.

–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Heaven's Gate –∏ Canary –æ–¥–∏–Ω–∞–∫–æ–≤—ã, –∏ –Ω–∏–∫–∞–∫–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –Ω–µ—Ç. –û–¥–Ω–∞–∫–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—Å—ë –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è, –æ —á—ë–º –º—ã —Ç–µ–±—è –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º.
–ö–æ–Ω—Ñ–∏–≥–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–µ –±—É–¥—É—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Canary, –∫–∞–∫ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.

–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Heaven's Gate, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /whats_new.

–ú—ã –Ω–µ –Ω–µ—Å—ë–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ Canary, –∏ –µ—Å–ª–∏ –æ—Ç –Ω–∞—à–µ–≥–æ VPN –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–∏—Ç—å, —É–≤–æ–ª—è—Ç –ª–∏ —Ç–µ–±—è —Å —Ä–∞–±–æ—Ç—ã/—É–º—Ä—ë—à—å –ª–∏ —Ç—ã –∑–∞–≤—Ç—Ä–∞/–æ—Ç—á–∏—Å–ª—è—Ç –ª–∏ —Ç–µ–±—è –∏–∑ —É–Ω–∏–≤–µ—Ä–∞, —Ç–æ –º—ã –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞.
"""
    else:
        msg = f"""üëã –ü—Ä–∏–≤–µ—Ç!
{faq_str}
–ï—Å–ª–∏ —É —Ç–µ–±—è –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /contact –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π –≤ –º–µ–Ω—é /me.

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é):
/help -- –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/me -- –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
/config -- –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
/contact -- –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
/unblock -- –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/–ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø
/change_peer_name -- –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–æ–Ω—Ñ–∏–≥–∞ (–ø–∏—Ä–∞)
"""
    await message.answer(text=msg, reply_markup=keyboard)

@bot_dispatcher.message(Command("help"))
async def cmd_help(message: Message) -> None:
    text = "üõü –ü–æ–º–æ—â—å –≤ –∫–æ–º–∞–Ω–¥–∞—Ö:\n"
    default_commands = get_default_commands()
    for command in default_commands:
        text += f"{command.command} -> {command.description}\n"

    if message.chat.id in bot_cfg.admins:
        text += "\n\nüõ†Ô∏è –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        for command in get_admin_commands()[len(default_commands)::]:
            text += f"{command.command} -> {command.description}\n"

    await message.answer(text)

@bot_dispatcher.startup()
async def on_startup(*args):
    if os.path.exists(".reboot"):
        with open(".reboot", encoding="utf-8") as f:
            chat_id = int(f.read())
            stickerset = await bot_instance.get_sticker_set("chunkytext")
            await bot_instance.send_sticker(chat_id, random.choice(stickerset.stickers).file_id)
            await bot_instance.send_message(chat_id, "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
        os.remove(".reboot")
    bot_logger.info("Bot is running!")

async def main() -> None:
    bot_dispatcher.include_router(get_handlers_router())

    signal.signal(signal.SIGINT, graceful_shutdown)

    async with asyncio.TaskGroup() as group:
        group.create_task(connections_observer.listen_events())
        group.create_task(interval_observer.run_checkers())
        group.create_task(bot_dispatcher.start_polling(bot_instance, handle_signals=False))
        if prometheus_monitor is not None:
            group.create_task(prometheus_monitor.update_metrics_task(connections_observer, interval=20))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog="heavens-gate", description="Run bot with core service.")
    parser.add_argument("-awg", "--amnezia",
                        help="Enable amnezia-wg functionality.",
                        action="store_true")

    args = parser.parse_args()

    if args.amnezia:
        wghub.change_command_mode(is_amnezia=True)

    asyncio.run(main())
